Description: Launch OpenVPN backed up by ActiveDirectory SimpleAD stack within its own VPC or an existing VPC

Parameters:

  #OpenVPN
  CookbookUrl:
    Type: String
    Default: 'https://github.com/netbears/opsworks-openvpn/releases/download/v1.0.0/cookbooks-v1.0.0.tar.gz'

  Version:
    Type: String
    Default: '2.7.4'

  InstanceType:
    Type: String
    Default: 'c5.large'
    AllowedValues:
    - c5.large
    - c5.xlarge
    - c5.2xlarge
    - c5.4xlarge

  InstanceRootVolumeSize:
    Type: String
    Default: '50'
    Description: Size in GB of the root volume

  SslLoadBalancer:
    Type: String
    Description: SSL ARN from Certificate Manager
    Default: arn:aws:acm:us-east-1:359360911388:certificate/0fbec0ab-69ea-46ab-bb0f-aecd359b4621

  OpenVPNDnsRecord:
    Type: String
    Default: vpn.aws.netbears.com

  OpenVPNDnsZone:
    Type: AWS::Route53::HostedZone::Id
    Description: Route53 hosted zone in which to place dns record
    Default: Z37W7PCK0HCQPS

  EnableMfa:
    Type: String
    Default: 'true'
    AllowedValues:
      - 'true'
      - 'false'

  #LDAP
  LdapBindDn:
    Type: String
    Default: openvpn@netbears.com
    Description: User will have to be created in AD after stack creation

  LdapBindPassword:
    Type: String
    NoEcho: 'true'
    Default: 'openvpn123!'
    Description: Password for bind user needs to be set up to this one after stack creation

  LdapUsersBaseDn:
    Type: String
    Default: OU=Users,OU=NETBEARS,DC=netbears,DC=com
    Description: Make sure the path exists in AD after stack creation

  LdapGroupVPNRequirement:
    Type: String
    Default: memberOf=CN=VPN,OU=Groups,OU=NETBEARS,DC=netbears,DC=com
    Description: Make sure the group exists in AD after stack creation

  LdapAdminUsername:
    Type: String
    Default: mariusmitrofan
    Description: Make sure the user exists in AD after stack creation

  #Network
  ClientNetmask:
    Type: String
    Default: '20'

  ClientNetwork:
    Type: String
    Default: '172.20.112.0'

  PrivateNetworkAccess1:
    Type: String
    Description: Set the VPC CIDR that you want to provide access to. Leave empty if none
    Default: "172.20.0.0/16"

  PrivateNetworkAccess2:
    Type: String
    Description: Set the VPC CIDR that you want to provide access to. Leave empty if none
    Default: "172.17.0.0/16"

  PrivateNetworkAccess3:
    Type: String
    Description: Set the VPC CIDR that you want to provide access to. Leave empty if none
    Default: "172.23.0.0/16"

  WebPort:
    Type: String
    Default: '443'

  ClientsTalkEachOther:
    Type: String
    Default: 'false'
    AllowedValues:
      - 'true'
      - 'false'

  RouteInternetTraffic:
    Type: String
    Default: 'false'
    AllowedValues:
      - 'true'
      - 'false'
    Description: Whether to route Internet traffic through OpenVPN or not

  DaemonListenPort:
    Type: String
    Default: '80'

  DaemonListenProtocol:
    Type: String
    Default: 'tcp'
    AllowedValues:
      - 'tcp'
      - 'udp'

  #ActiveDirectory
  Size:
    Type: String
    Default: 'Small'
    AllowedValues:
      - 'Small'
      - 'Large'
    Description: Small - Supports up to 500 users (~ 40 USD/month). Large - Supports up to 5,000 users (~ 150 USD/month).

  EnableSso:
    Type: String
    Default: 'false'
    AllowedValues:
      - 'false'
      - 'true'
    Description: Single sign-on allows users in your directory to access certain AWS services from a computer joined to the directory without having to enter their credentials separately

  Name:
    Type: String
    Default: netbears.com
    Description: The fully qualified domain name for the AWS Managed Microsoft AD directory, such as corp.example.com. This name will resolve inside your VPC only. It does not need to be publicly resolvable.

  ShortName:
    Type: String
    Default: netbears
    Description: The NetBIOS name for your domain, such as CORP. For example, CORP for the directory DNS corp.example.com.

  Password:
    Type: String
    NoEcho: 'true'
    Description: The password for the default administrative user named Admin. If you need to change the password for the administrator account, see the ResetUserPassword API call in the AWS Directory Service API Reference.
    AllowedPattern: (?=^.{8,64}$)((?=.*\d)(?=.*[A-Z])(?=.*[a-z])|(?=.*\d)(?=.*[^A-Za-z0-9\s])(?=.*[a-z])|(?=.*[^A-Za-z0-9\s])(?=.*[A-Z])(?=.*[a-z])|(?=.*\d)(?=.*[A-Z])(?=.*[^A-Za-z0-9\s]))^.*
    Default: 6hYHhhuvMUFevG7a

  NewVpc:
    Type: String
    Default: new
    AllowedValues:
      - new
      - existing
    Description: If "new", CF will provision all necessary VPC settings and launch the stack in the new VPC

  VpcId:
    Type: String
    Description: Setting takes effect only if NewVpc is set to "existing"
    Default: ignore

  SubnetIdsPrivate:
    Type: CommaDelimitedList
    Description: Setting takes effect only if CreateVpc is set to "existing" (specify AT LEAST 2 PRIVATE subnets)
    Default: ignore1,ignore2

  SubnetIdsPublic:
    Type: CommaDelimitedList
    Description: Setting takes effect only if CreateVpc is set to "existing" (specify AT LEAST 2 PUBLIC subnets)
    Default: ignore1,ignore2

  LdapDnsZone:
    Type: AWS::Route53::HostedZone::Id
    Description: Route53 hosted zone in which to place dns record
    Default: Z37W7PCK0HCQPS

  LdapDnsRecord:
    Type: String
    Default: ldap.aws.netbears.com

  #Jumpbox
  Jumpbox:
    Type: String
    Default: 'true'
    AllowedValues:
      - 'true'
      - 'false'
    Description: Whether to deploy a Windows Server Jumpbox attached to the domain

  JumpboxAmi:
    Type: AWS::EC2::Image::Id
    Description: Windows 2016 or 2019 Base AMI available in your region (default value is current Windows 2019 Base AMI in us-east-1 at time of writing)
    Default: ami-04ca2d0801450d495

  JumpboxKeyPair:
    Type: AWS::EC2::KeyPair::KeyName
    Description: KeyPair for EC2 Instance
    Default: mariusmitrofan

  JumpboxType:
    Type: String
    Default: 'public-ip'
    AllowedValues:
      - public-ip
      - private-ip
    Description: Whether to deploy the jumpbox with public ip or not

  JumpboxInstanceType:
    Type: String
    Default: t2.medium
    AllowedValues:
    - t2.micro
    - t2.small
    - t2.medium
    - c4.large
    - c4.xlarge
    ConstraintDescription: Must be a valid EC2 instance type.

  # Subnets
  VPCSubnetCidrBlock:
    Description: 172.20.0.0/16 = 172.20.0.0-172.20.255.255 = 256 Subnets = 65534 hosts
    Type: String
    Default: 172.20.0.0/16
    MinLength: '10'
    MaxLength: '18'
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
  AvailabilityZone1:
    Type: String
    Default: a
    AllowedValues:
    - a
    - b
    - c
  AvailabilityZone2:
    Type: String
    Default: b
    AllowedValues:
    - a
    - b
    - c
  AvailabilityZone3:
    Type: String
    Default: c
    AllowedValues:
    - a
    - b
    - c
  PublicSubnetCidrBlock1:
    Type: String
    Default: 172.20.0.0/20
    MinLength: '10'
    MaxLength: '18'
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
  PublicSubnetCidrBlock2:
    Type: String
    Default: 172.20.16.0/20
    MinLength: '10'
    MaxLength: '18'
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
  PublicSubnetCidrBlock3:
    Type: String
    Default: 172.20.32.0/20
    MinLength: '10'
    MaxLength: '18'
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
  PrivateSubnetCidrBlock1:
    Type: String
    Default: 172.20.48.0/20
    MinLength: '10'
    MaxLength: '18'
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
  PrivateSubnetCidrBlock2:
    Type: String
    Default: 172.20.64.0/20
    MinLength: '10'
    MaxLength: '18'
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
  PrivateSubnetCidrBlock3:
    Type: String
    Default: 172.20.80.0/20
    MinLength: '10'
    MaxLength: '18'
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"

  # Remote Access Network
  RemoteCidrForSecurityGroup:
    Description: CIDR Block for SG to Grant Access to Instances (i.e. 192.168.100.0/24)
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 172.20.0.0/16
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid CIDR range of the form x.x.x.x/x.
  RemoteCidrForPublicAcl:
    Description: CIDR Block for Public ACL to Grant Access to Network (i.e. 32.159.24.111/32)
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid CIDR range of the form x.x.x.x/x.

  # Rule Numbers
  AllowAllInboundPublicRuleNumber:
    Type: Number
    Default: '100'
  AllowAllInboundPrivateRuleNumber:
    Type: Number
    Default: '100'
  AllowAllOutboundPublicRuleNumber:
    Type: Number
    Default: '100'
  AllowAllOutboundPrivateRuleNumber:
    Type: Number
    Default: '100'

Conditions:
  CreateVpc:
    Fn::Equals:
      - Ref: NewVpc
      - new

  DoNotCreateVpc:
    Fn::Equals:
      - Ref: NewVpc
      - existing

  DeployJumpbox:
    Fn::Equals:
      - Ref: Jumpbox
      - 'true'

  PublicJumpbox:
    Fn::Equals:
      - Ref: JumpboxType
      - public-ip

  IsTcpDaemon:
    Fn::Equals:
      - Ref: DaemonListenProtocol
      - tcp

Resources:
  AWSDirectoryExistingVpc:
    Condition: DoNotCreateVpc
    Type: AWS::DirectoryService::SimpleAD
    Properties:
      EnableSso:
        Ref: EnableSso
      Name:
        Ref: Name
      Password: 
        Ref: Password
      ShortName: 
        Ref: ShortName
      Size:
        Ref: Size
      VpcSettings: 
        SubnetIds: 
          Fn::If:
            - CreateVpc
            - 
              - Ref: PrivateSubnet1
              - Ref: PrivateSubnet2
            - Ref: SubnetIdsPrivate
        VpcId:
          Fn::If:
            - CreateVpc
            - Ref: VPC
            - Ref: VpcId

  AWSDirectoryNewVpc:
    Condition: CreateVpc
    DependsOn: PrivateRoute
    Type: AWS::DirectoryService::SimpleAD
    Properties:
      EnableSso:
        Ref: EnableSso
      Name:
        Ref: Name
      Password: 
        Ref: Password
      ShortName: 
        Ref: ShortName
      Size:
        Ref: Size
      VpcSettings: 
        SubnetIds: 
          Fn::If:
            - CreateVpc
            - 
              - Ref: PrivateSubnet1
              - Ref: PrivateSubnet2
            - Ref: SubnetIdsPrivate
        VpcId:
          Fn::If:
            - CreateVpc
            - Ref: VPC
            - Ref: VpcId

  Route53Record:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneId:
        Ref: LdapDnsZone
      Comment: 
        Fn::Sub: Route53-record-for-LDAP
      RecordSets:
      - Name:
          Ref: LdapDnsRecord
        Type: A
        TTL: 300
        ResourceRecords:
          Fn::If:
            - CreateVpc
            - Fn::GetAtt: AWSDirectoryNewVpc.DnsIpAddresses
            - Fn::GetAtt: AWSDirectoryExistingVpc.DnsIpAddresses

  SsmDocument:
    Condition: DeployJumpbox
    Type: AWS::SSM::Document
    Properties:
      Content:
        schemaVersion: '1.2'
        description: Join instances to an AWS Directory Service domain.
        parameters:
          directoryId:
            type: String
            description: "(Required) The ID of the AWS Directory Service directory."
          directoryName:
            type: String
            description: "(Required) The name of the directory; for example, test.example.com"
          dnsIpAddresses:
            type: StringList
            default: []
            description: "(Optional) The IP addresses of the DNS servers in the directory.
              Required when DHCP is not configured. Learn more at http://docs.aws.amazon.com/directoryservice/latest/simple-ad/join_get_dns_addresses.html"
            allowedPattern: "((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)"
        runtimeConfig:
          aws:domainJoin:
            properties:
              directoryId: "{{ directoryId }}"
              directoryName: "{{ directoryName }}"
              dnsIpAddresses: "{{ dnsIpAddresses }}"

  JumpboxEc2:
    Condition: DeployJumpbox
    Type: AWS::EC2::Instance
    Properties:
      IamInstanceProfile:
        Ref: InstanceProfile
      SsmAssociations:
      - DocumentName:
          Ref: SsmDocument
        AssociationParameters:
        - Key: directoryId
          Value:
            Fn::If:
              - CreateVpc
              - [ Ref: AWSDirectoryNewVpc ]
              - [ Ref: AWSDirectoryExistingVpc ]
        - Key: directoryName
          Value:
          - Ref: Name
        - Key: dnsIpAddresses
          Value:
            Fn::If:
              - CreateVpc
              - 
                - Fn::Select:
                    - 0
                    - Fn::GetAtt: AWSDirectoryNewVpc.DnsIpAddresses
                - Fn::Select:
                    - 1
                    - Fn::GetAtt: AWSDirectoryNewVpc.DnsIpAddresses
              - 
                - Fn::Select:
                    - 0
                    - Fn::GetAtt: AWSDirectoryExistingVpc.DnsIpAddresses
                - Fn::Select:
                    - 1
                    - Fn::GetAtt: AWSDirectoryExistingVpc.DnsIpAddresses
      KeyName:
        Ref: JumpboxKeyPair
      ImageId:
        Ref: JumpboxAmi
      InstanceType:
        Ref: JumpboxInstanceType
      Tags:
      - Key: Name
        Value:
          Fn::Sub: "${AWS::StackName}-Jumpbox"
      NetworkInterfaces:
      - AssociatePublicIpAddress:
          Fn::If:
            - PublicJumpbox
            - 'true'
            - 'false'
        DeviceIndex: '0'
        GroupSet:
        - Ref: InstanceSecurityGroup
        SubnetId:
          Fn::If:
            - CreateVpc
            - Fn::If:
              - PublicJumpbox
              - Ref: PublicSubnet1
              - Ref: PrivateSubnet1
            - Fn::Select: [ 0, Ref: SubnetIdsPrivate ]

  InstanceRole:
    Condition: DeployJumpbox
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: 
                - 'ec2.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM

  InstanceProfile:
    Condition: DeployJumpbox
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - Ref: InstanceRole

  InstanceSecurityGroup:
    Condition: DeployJumpbox
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to client host
      VpcId:
        Fn::If:
          - CreateVpc
          - Ref: VPC
          - Ref: VpcId
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '3389'
        ToPort: '3389'
        CidrIp: 0.0.0.0/0

  KmsEncryptRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal: {Service: [lambda.amazonaws.com]}
          Action: ['sts:AssumeRole']
      Policies:
      - PolicyName:
          Fn::Sub: ${AWS::StackName}-KMS
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - kms:Encrypt*
            - kms:Get*
            - kms:List*
            - kms:Describe*
            Resource: '*'
      - PolicyName:
          Fn::Sub: ${AWS::StackName}-CloudWatch
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - logs:*
            - cloudwatch:*
            Resource: '*'

  KmsEncryptFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      Runtime: python3.7
      Role:
        Fn::GetAtt: KmsEncryptRole.Arn
      Code:
        ZipFile:
          Fn::Sub: |
            import boto3
            import cfnresponse
            import base64
            def lambda_handler(event, context):
              responseValue={}
              kms = boto3.client('kms',region_name="${AWS::Region}")
              secret = kms.encrypt(KeyId="${LdapPasswordKey.Arn}",Plaintext="${LdapBindPassword}")
              blob = secret["CiphertextBlob"]
              responseValue["Value"] = str(base64.b64encode(blob))[2:-1]
              cfnresponse.send(event, context, cfnresponse.SUCCESS, responseValue)
              return True

  KmsEncryptResult:
    Type: Custom::KmsEncryptLdapBindPassword
    Properties:
      ServiceToken:
        Fn::GetAtt: KmsEncryptFunction.Arn

  LdapPasswordKey:
    Type: AWS::KMS::Key
    Properties:
      KeyPolicy:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: kms:*
            Resource: "*"
            Principal:
              AWS:
                - Fn::Sub: arn:aws:iam::${AWS::AccountId}:root
          - Effect: Allow
            Action: kms:Encrypt
            Resource: "*"
            Principal:
              AWS:
                - Fn::GetAtt: KmsEncryptRole.Arn
          - Effect: Allow
            Action: kms:Decrypt
            Resource: "*"
            Principal:
              AWS:
                - Fn::GetAtt: InstanceRole.Arn

  LdapPasswordAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: alias/OpenVPN
      TargetKeyId:
        Ref: LdapPasswordKey

  ServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - 'opsworks.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName:
            Fn::Sub: ${AWS::StackName}-OpsWorksDefaultPolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'ec2:*'
                  - 'iam:PassRole'
                  - 'cloudwatch:GetMetricStatistics'
                  - 'cloudwatch:DescribeAlarms'
                  - 'elasticloadbalancing:*'
                  - 'ecs:*'
                  - 'rds:*'
                Resource: '*'

  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: 
                - 'ec2.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName:
            Fn::Sub: ${AWS::StackName}-ec2
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'ec2:Get*'
                  - 'ec2:List*'
                  - 'ec2:Describe*'
                Resource:
                  - '*'
        - PolicyName:
            Fn::Sub: ${AWS::StackName}-s3
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 's3:*'
                Resource:
                  - '*'
        - PolicyName:
            Fn::Sub: ${AWS::StackName}-CloudWatchLogs
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'cloudwatch:*'
                  - 'logs:*'
                Resource:
                  - '*'

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - Ref: InstanceRole

  Ec2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription:
        Fn::Sub: ${AWS::StackName}-Sg
      VpcId:
        Fn::If:
          - CreateVpc
          - Ref: VPC
          - Ref: VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
        - IpProtocol: udp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0

  AlbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription:
        Fn::Sub: ${AWS::StackName}-Sg
      VpcId:
        Fn::If:
          - CreateVpc
          - Ref: VPC
          - Ref: VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort:
            Ref: WebPort
          ToPort:
            Ref: WebPort
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort:
            Ref: DaemonListenPort
          ToPort:
            Ref: DaemonListenPort
          CidrIp: 0.0.0.0/0
        - IpProtocol: udp
          FromPort:
            Ref: DaemonListenPort
          ToPort:
            Ref: DaemonListenPort
          CidrIp: 0.0.0.0/0

  OpsWorksStack: 
    Type: AWS::OpsWorks::Stack
    Properties: 
      AgentVersion: LATEST
      Name: 
        Ref: AWS::StackName
      ServiceRoleArn: 
        Fn::GetAtt:
          - ServiceRole
          - Arn
      DefaultInstanceProfileArn: 
        Fn::GetAtt:
          - InstanceProfile
          - Arn
      ConfigurationManager:
        Name: Chef
        Version: '12'
      UseCustomCookbooks: true
      CustomCookbooksSource:
        Type: archive
        Url:
          Ref: CookbookUrl
      DefaultSubnetId:
        Fn::If:
          - CreateVpc
          - Ref: PrivateSubnet1
          - Fn::Select: [ 0, Ref: SubnetIdsPrivate ]
      VpcId:
        Fn::If:
          - CreateVpc
          - Ref: VPC
          - Ref: VpcId
      UseOpsworksSecurityGroups: true
      DefaultOs: Ubuntu 18.04 LTS
      DefaultRootDeviceType: ebs
      CustomJson:
        Fn::Sub: |
          {
            "openvpnas": {
              "version": "${Version}",
              "ubuntu_version": "Ubuntu18",
              "admin_username": "${LdapAdminUsername}",
              "admin_ui.https.port": "${WebPort}",
              "auth.ldap.0.add_req": "${LdapGroupVPNRequirement}",
              "auth.ldap.0.bind_dn": "${LdapBindDn}",
              "auth.ldap.0.bind_pw_encrypted": "${KmsEncryptResult.Value}",
              "auth.ldap.0.server.0.host": "${LdapDnsRecord}",
              "auth.ldap.0.users_base_dn": "${LdapUsersBaseDn}",
              "cs.https.port": "${WebPort}",
              "host.name": "${LdapDnsRecord}",
              "vpn.client.routing.inter_client": "${ClientsTalkEachOther}",
              "vpn.client.routing.reroute_gw": "${RouteInternetTraffic}",
              "vpn.daemon.0.client.netmask_bits": "${ClientNetmask}",
              "vpn.daemon.0.client.network": "${ClientNetwork}",
              "vpn.daemon.0.listen.port": "${DaemonListenPort}",
              "vpn.daemon.0.listen.protocol": "${DaemonListenProtocol}",
              "vpn.server.routing.private_network.0": "${PrivateNetworkAccess1}",
              "vpn.server.routing.private_network.1": "${PrivateNetworkAccess2}",
              "vpn.server.routing.private_network.2": "${PrivateNetworkAccess3}",
              "enable_mfa": ${EnableMfa}
            }
          }
      Tags:
        - Key: Application
          Value: OpenVPN
        - Key: MaintainerName
          Value: Marius Mitrofan
        - Key: MaintainerTeam
          Value: NETBEARS
        - Key: MaintainerEmail
          Value: support@netbears.com

  Elb:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    DependsOn: Layer
    Properties:
      HealthCheck:
        Interval: 30
        Target: TCP:22
        Timeout: 5
        UnhealthyThreshold: 5
        HealthyThreshold: 5
      Listeners:
        - Fn::If:
          - IsTcpDaemon
          - InstancePort:
              Ref: DaemonListenPort
            LoadBalancerPort:
              Ref: DaemonListenPort
            Protocol: TCP
            InstanceProtocol: TCP
            SSLCertificateId:
              Ref: SslLoadBalancer
          - Ref: AWS::NoValue
        - InstancePort:
            Ref: WebPort
          LoadBalancerPort:
            Ref: WebPort
          Protocol: HTTPS
          InstanceProtocol: HTTPS
          PolicyNames:
            - Fn::Sub: ${AWS::StackName}
          SSLCertificateId:
            Ref: SslLoadBalancer
      Scheme: internet-facing
      SecurityGroups:
        - Ref: AlbSecurityGroup
      Subnets:
        Fn::If:
          - CreateVpc
          - 
            - Ref: PublicSubnet1
            - Ref: PublicSubnet2
          - Ref: SubnetIdsPublic
      ConnectionDrainingPolicy:
        Enabled: 'true'
        Timeout: '300'
      LBCookieStickinessPolicy:
        - CookieExpirationPeriod: 600
          PolicyName:
            Ref: AWS::StackName

  Layer:
    Type: AWS::OpsWorks::Layer
    Properties:
      Name: OpenVPN
      Shortname: openvpn-
      Type: custom
      EnableAutoHealing: 'false'
      AutoAssignElasticIps: 'false'
      AutoAssignPublicIps: 'false'
      StackId:
        Ref: OpsWorksStack
      CustomRecipes:
        Setup:
          - 'openvpn_stack::setup'
      UseEbsOptimizedInstances: True
      CustomSecurityGroupIds:
        - Fn::GetAtt: Ec2SecurityGroup.GroupId

  ElbLayer:
    DependsOn: Elb
    Type: AWS::OpsWorks::ElasticLoadBalancerAttachment
    Properties: 
      ElasticLoadBalancerName: 
        Ref: Elb
      LayerId: 
        Ref: Layer

  InstanceOpsWorks: 
    Type: AWS::OpsWorks::Instance
    DependsOn: Elb
    Properties: 
      StackId: 
        Ref: OpsWorksStack
      LayerIds: 
        - Ref: Layer
      InstanceType:
        Ref: InstanceType
      RootDeviceType: ebs
      SubnetId:
        Fn::If:
          - CreateVpc
          - PrivateSubnet1
          - Fn::Select: [ 0, Ref: SubnetIdsPrivate ]
      Hostname: openvpn-1
      BlockDeviceMappings:
        - DeviceName: ROOT_DEVICE
          Ebs:
            VolumeType: gp2
            VolumeSize:
              Ref: InstanceRootVolumeSize

  Route53Record:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneId:
        Ref: OpenVPNDnsZone
      Comment: 
        Fn::Sub: Route53-record-for-OpenVPN
      RecordSets:
      - Name:
          Ref: OpenVPNDnsRecord
        Type: A
        AliasTarget:
          HostedZoneId: 
            Fn::GetAtt:
              - Elb
              - CanonicalHostedZoneNameID
          DNSName: 
            Fn::GetAtt:
              - Elb
              - DNSName

  VPC:
    Condition: CreateVpc
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      CidrBlock:
        Ref: VPCSubnetCidrBlock
      Tags:
      - Key: Name
        Value:
          Ref: "AWS::StackName"

  PublicSubnet1:
    Condition: CreateVpc
    Type: AWS::EC2::Subnet
    DependsOn: VPC
    Properties:
      VpcId:
        Ref: VPC
      AvailabilityZone:
        Fn::Sub: "${AWS::Region}${AvailabilityZone1}"
      MapPublicIpOnLaunch: true
      CidrBlock:
        Ref: PublicSubnetCidrBlock1
      Tags:
      - Key: Name
        Value:
          Fn::Sub: "${AWS::StackName}-publiz-az1"

  PublicSubnet2:
    Condition: CreateVpc
    Type: AWS::EC2::Subnet
    DependsOn: VPC
    Properties:
      VpcId:
        Ref: VPC
      AvailabilityZone:
        Fn::Sub: "${AWS::Region}${AvailabilityZone2}"
      MapPublicIpOnLaunch: true
      CidrBlock:
        Ref: PublicSubnetCidrBlock2
      Tags:
      - Key: Name
        Value:
          Fn::Sub: "${AWS::StackName}-public-az2"

  PublicSubnet3:
    Condition: CreateVpc
    Type: AWS::EC2::Subnet
    DependsOn: VPC
    Properties:
      VpcId:
        Ref: VPC
      AvailabilityZone:
        Fn::Sub: "${AWS::Region}${AvailabilityZone3}"
      MapPublicIpOnLaunch: true
      CidrBlock:
        Ref: PublicSubnetCidrBlock3
      Tags:
      - Key: Name
        Value:
          Fn::Sub: "${AWS::StackName}-public-az3"

  InternetGateway:
    Condition: CreateVpc
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value:
          Fn::Sub: "${AWS::StackName}-InternetGateway"

  GatewayToInternet:
    Condition: CreateVpc
    Type: AWS::EC2::VPCGatewayAttachment
    DependsOn:
    - InternetGateway
    - VPC
    Properties:
      VpcId:
        Ref: VPC
      InternetGatewayId:
        Ref: InternetGateway

  NatGateway:
    Condition: CreateVpc
    Type: AWS::EC2::NatGateway
    DependsOn: GatewayToInternet
    Properties:
      AllocationId:
        Fn::GetAtt:
        - EIP
        - AllocationId
      SubnetId:
        Ref: PublicSubnet1
      Tags:
      - Key: Name
        Value:
          Fn::Sub: "${AWS::StackName}-NatGateway"

  EIP:
    Condition: CreateVpc
    Type: AWS::EC2::EIP
    Properties:
      Domain: VPC

  PublicRouteTable:
    Condition: CreateVpc
    Type: AWS::EC2::RouteTable
    DependsOn: VPC
    Properties:
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value:
          Fn::Sub: "${AWS::StackName}-public"

  PublicRoute:
    Condition: CreateVpc
    Type: AWS::EC2::Route
    DependsOn:
    - PublicRouteTable
    - InternetGateway
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway

  PublicSubnetRouteTableAssociation1:
    Condition: CreateVpc
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
    - PublicSubnet1
    - PublicRouteTable
    Properties:
      SubnetId:
        Ref: PublicSubnet1
      RouteTableId:
        Ref: PublicRouteTable

  PublicSubnetRouteTableAssociation2:
    Condition: CreateVpc
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
    - PublicSubnet2
    - PublicRouteTable
    - GatewayToInternet
    Properties:
      SubnetId:
        Ref: PublicSubnet2
      RouteTableId:
        Ref: PublicRouteTable

  PublicSubnetRouteTableAssociation3:
    Condition: CreateVpc
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
    - PublicSubnet3
    - PublicRouteTable
    - GatewayToInternet
    Properties:
      SubnetId:
        Ref: PublicSubnet3
      RouteTableId:
        Ref: PublicRouteTable

  PrivateSubnet1:
    Condition: CreateVpc
    Type: AWS::EC2::Subnet
    DependsOn: VPC
    Properties:
      VpcId:
        Ref: VPC
      AvailabilityZone:
        Fn::Sub: "${AWS::Region}${AvailabilityZone1}"
      CidrBlock:
        Ref: PrivateSubnetCidrBlock1
      Tags:
      - Key: Name
        Value:
          Fn::Sub: "${AWS::StackName}-private-az1"

  PrivateSubnet2:
    Condition: CreateVpc
    Type: AWS::EC2::Subnet
    DependsOn: VPC
    Properties:
      VpcId:
        Ref: VPC
      AvailabilityZone:
        Fn::Sub: "${AWS::Region}${AvailabilityZone2}"
      CidrBlock:
        Ref: PrivateSubnetCidrBlock2
      Tags:
      - Key: Name
        Value:
          Fn::Sub: "${AWS::StackName}-private-az2"

  PrivateSubnet3:
    Condition: CreateVpc
    Type: AWS::EC2::Subnet
    DependsOn: VPC
    Properties:
      VpcId:
        Ref: VPC
      AvailabilityZone:
        Fn::Sub: "${AWS::Region}${AvailabilityZone3}"
      CidrBlock:
        Ref: PrivateSubnetCidrBlock3
      Tags:
      - Key: Name
        Value:
          Fn::Sub: "${AWS::StackName}-private-az3"

  PrivateRouteTable:
    Condition: CreateVpc
    Type: AWS::EC2::RouteTable
    DependsOn: VPC
    Properties:
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value:
          Fn::Sub: "${AWS::StackName}-private"

  PrivateRoute:
    Condition: CreateVpc
    DependsOn:
    - PrivateRouteTable
    - NatGateway
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NatGateway

  PrivateSubnetRouteTableAssociation1:
    Condition: CreateVpc
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
    - PrivateSubnet1
    - PrivateRouteTable
    Properties:
      SubnetId:
        Ref: PrivateSubnet1
      RouteTableId:
        Ref: PrivateRouteTable

  PrivateSubnetRouteTableAssociation2:
    Condition: CreateVpc
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
    - PrivateSubnet2
    - PrivateRouteTable
    Properties:
      SubnetId:
        Ref: PrivateSubnet2
      RouteTableId:
        Ref: PrivateRouteTable

  PrivateSubnetRouteTableAssociation3:
    Condition: CreateVpc
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
    - PrivateSubnet3
    - PrivateRouteTable
    Properties:
      SubnetId:
        Ref: PrivateSubnet3
      RouteTableId:
        Ref: PrivateRouteTable

  S3VpcEndpoint:
    Condition: CreateVpc
    Type: AWS::EC2::VPCEndpoint
    DependsOn:
    - VPC
    - PrivateRouteTable
    - PublicRouteTable
    Properties:
      PolicyDocument:
        Statement:
        - Action: "*"
          Effect: Allow
          Resource: "*"
          Principal: "*"
      RouteTableIds:
      - Ref: PrivateRouteTable
      - Ref: PublicRouteTable
      ServiceName:
        Fn::Sub: "com.amazonaws.${AWS::Region}.s3"
      VpcId:
        Ref: VPC

  # Public Network ACL
  PublicNetworkAcl:
    Condition: CreateVpc
    Type: AWS::EC2::NetworkAcl
    DependsOn: VPC
    Properties:
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value:
          Fn::Sub: "${AWS::StackName}-public-acl"
      
  # Public Network ACL Rules
  InboundPublicNetworkAclAllowAll:
    Condition: CreateVpc
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: PublicNetworkAcl
    Properties:
      NetworkAclId:
        Ref: PublicNetworkAcl
      RuleNumber:
        Ref: AllowAllInboundPublicRuleNumber
      Protocol: '-1'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '0'
        To: '65535'

  OutboundPublicNetworkAclAllowAll:
    Condition: CreateVpc
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: PublicNetworkAcl
    Properties:
      NetworkAclId:
        Ref: PublicNetworkAcl
      RuleNumber:
        Ref: AllowAllOutboundPublicRuleNumber
      Protocol: "-1"
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '0'
        To: '65535'

  # Public Subnet Association
  PublicSubnetNetworkAclAssociation1:
    Condition: CreateVpc
    Type: AWS::EC2::SubnetNetworkAclAssociation
    DependsOn:
    - PublicSubnet1
    - PublicNetworkAcl
    Properties:
      SubnetId:
        Ref: PublicSubnet1
      NetworkAclId:
        Ref: PublicNetworkAcl

  PublicSubnetNetworkAclAssociation2:
    Condition: CreateVpc
    Type: AWS::EC2::SubnetNetworkAclAssociation
    DependsOn:
    - PublicSubnet2
    - PublicNetworkAcl
    Properties:
      SubnetId:
        Ref: PublicSubnet2
      NetworkAclId:
        Ref: PublicNetworkAcl

  PublicSubnetNetworkAclAssociation3:
    Condition: CreateVpc
    Type: AWS::EC2::SubnetNetworkAclAssociation
    DependsOn:
    - PublicSubnet3
    - PublicNetworkAcl
    Properties:
      SubnetId:
        Ref: PublicSubnet3
      NetworkAclId:
        Ref: PublicNetworkAcl

  # Private Network ACL
  PrivateNetworkAcl:
    Condition: CreateVpc
    Type: AWS::EC2::NetworkAcl
    DependsOn: VPC
    Properties:
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value:
          Fn::Sub: "${AWS::StackName}-private-acl"
      
  # Private Network ACL Rules
  InboundEphemeralPrivateNetworkAclAllowAll:
    Condition: CreateVpc
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: PrivateNetworkAcl
    Properties:
      NetworkAclId:
        Ref: PrivateNetworkAcl
      RuleNumber:
        Ref: AllowAllInboundPrivateRuleNumber
      Protocol: "-1"
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '0'
        To: '65535'

  OutboundPrivateNetworkAclAllowAll:
    Condition: CreateVpc
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: PrivateNetworkAcl
    Properties:
      NetworkAclId:
        Ref: PrivateNetworkAcl
      RuleNumber:
        Ref: AllowAllOutboundPrivateRuleNumber
      Protocol: "-1"
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '0'
        To: '65535'

  # Private Subnet Associations
  PrivateSubnetNetworkAclAssociation1:
    Condition: CreateVpc
    Type: AWS::EC2::SubnetNetworkAclAssociation
    DependsOn:
    - PrivateSubnet1
    - PrivateNetworkAcl
    Properties:
      SubnetId:
        Ref: PrivateSubnet1
      NetworkAclId:
        Ref: PrivateNetworkAcl

  PrivateSubnetNetworkAclAssociation2:
    Condition: CreateVpc
    Type: AWS::EC2::SubnetNetworkAclAssociation
    DependsOn:
    - PrivateSubnet2
    - PrivateNetworkAcl
    Properties:
      SubnetId:
        Ref: PrivateSubnet2
      NetworkAclId:
        Ref: PrivateNetworkAcl

  PrivateSubnetNetworkAclAssociation3:
    Condition: CreateVpc
    Type: AWS::EC2::SubnetNetworkAclAssociation
    DependsOn:
    - PrivateSubnet3
    - PrivateNetworkAcl
    Properties:
      SubnetId:
        Ref: PrivateSubnet3
      NetworkAclId:
        Ref: PrivateNetworkAcl

  # Security Groups
  InternalAccessSecurityGroup:
    Condition: CreateVpc
    Type: AWS::EC2::SecurityGroup
    DependsOn: VPC
    Properties:
      GroupDescription: Instance to Instance Access in VPC
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value:
          Fn::Sub: "${AWS::StackName}-instance-to-instance"

  InternalAccessSecurityGroupIngress:
    Condition: CreateVpc
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: InternalAccessSecurityGroup
    Properties:
      GroupId:
        Ref: InternalAccessSecurityGroup
      IpProtocol: "-1"
      SourceSecurityGroupId:
        Ref: InternalAccessSecurityGroup

  RemoteAccessSecurityGroup:
    Condition: CreateVpc
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Instance Access over VPN/Direct Connect
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value:
          Fn::Sub: "${AWS::StackName}-remote-to-instance"
      SecurityGroupIngress:
      - IpProtocol: "-1"
        CidrIp:
          Ref: RemoteCidrForSecurityGroup
      SecurityGroupEgress:
      - IpProtocol: "-1"
        CidrIp: 0.0.0.0/0

Outputs:
  AdminUrlOpenVPN:
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-AdminUrlOpenVPN"
    Value:
      Fn::Sub: "https://${OpenVPNDnsRecord}:${WebPort}/admin"

  ClientUrlOpenVPN:
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-ClientUrlOpenVPN"
    Value:
      Fn::Sub: "https://${OpenVPNDnsRecord}:${WebPort}"

  JumpboxIp:
    Condition: DeployJumpbox
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-JumpboxIp"
    Value:
      Fn::If:
        - PublicJumpbox
        - Fn::GetAtt: JumpboxEc2.PublicIp
        - Fn::GetAtt: JumpboxEc2.PrivateIp

  DnsIpAddresses:
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-DnsIpAddresses
    Value:
      Fn::If:
        - CreateVpc
        - Fn::Join:
          - ", "
          - Fn::GetAtt: AWSDirectoryNewVpc.DnsIpAddresses
        - Fn::Join:
          - ", "
          - Fn::GetAtt: AWSDirectoryExistingVpc.DnsIpAddresses

  VpcId:
    Condition: CreateVpc
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-VpcId"
    Value:
      Ref: VPC

  PrivateSubnet1:
    Condition: CreateVpc
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-PrivateSubnet1"
    Value:
      Ref: PrivateSubnet1

  PrivateSubnet2:
    Condition: CreateVpc
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-PrivateSubnet2"
    Value:
      Ref: PrivateSubnet2

  PrivateSubnet3:
    Condition: CreateVpc
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-PrivateSubnet3"
    Value:
      Ref: PrivateSubnet3

  PublicSubnet1:
    Condition: CreateVpc
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-PublicSubnet1"
    Value:
      Ref: PublicSubnet1

  PublicSubnet2:
    Condition: CreateVpc
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-PublicSubnet2"
    Value:
      Ref: PublicSubnet2

  PublicSubnet3:
    Condition: CreateVpc
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-PublicSubnet3"
    Value:
      Ref: PublicSubnet3

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: ActiveDirectory
      Parameters:
      - Size
      - EnableSso
      - Name
      - ShortName
      - Password
      - NewVpc
      - VpcId
      - SubnetIdsPrivate
      - SubnetIdsPublic
      - LdapDnsZone
      - LdapDnsRecord
    - Label:
        default: Jumpbox
      Parameters:
      - Jumpbox
      - JumpboxAmi
      - JumpboxKeyPair
      - JumpboxType
      - JumpboxInstanceType
    - Label:
        default: Remote Access
      Parameters:
      - RemoteCidrForSecurityGroup
      - RemoteCidrForPublicAcl
    - Label:
        default: Subnets
      Parameters:
      - VPCSubnetCidrBlock
      - PublicSubnetCidrBlock1
      - PublicSubnetCidrBlock2
      - PublicSubnetCidrBlock3
      - PrivateSubnetCidrBlock1
      - PrivateSubnetCidrBlock2
      - PrivateSubnetCidrBlock3
      - AvailabilityZone1
      - AvailabilityZone2
      - AvailabilityZone3
    - Label:
        default: Public ACL Rule Numbers
      Parameters:
      - AllowAllInboundPublicRuleNumber
      - AllowAllOutboundPublicRuleNumber
    - Label:
        default: Private ACL Rule Numbers
      Parameters:
      - AllowAllInboundPrivateRuleNumber
      - AllowAllOutboundPrivateRuleNumber
    - Label:
        default: OpenVPN
      Parameters:
      - Size
      - CookbookUrl
      - Version
      - InstanceType
      - InstanceRootVolumeSize
      - VpcId
      - SslLoadBalancer
      - AdminPassword
      - OpenVPNDnsRecord
      - OpenVPNDnsZone
      - EnableMfa
    - Label:
        default: LDAP
      Parameters:
      - LdapBindDn
      - LdapBindPassword
      - LdapUsersBaseDn
      - LdapGroupVPNRequirement
      - LdapAdminUsername
    - Label:
        default: Network
      Parameters:
      - ClientNetmask
      - ClientNetwork
      - PrivateNetworkAccess
      - RouteInternetTraffic
      - ClientsTalkEachOther
      - DaemonListenProtocol
      - DaemonListenPort
      - PrivateNetworkAccess1
      - PrivateNetworkAccess2
      - PrivateNetworkAccess3
      - WebPort
    ParameterLabels:
      RemoteCidrForSecurityGroup:
        default: Network CIDR for SG
      RemoteCidrForPublicAcl:
        default: Network CIDR for ACL
      VPCSubnetCidrBlock:
        default: VPC Subnet
      PublicSubnetCidrBlock1:
        default: Public Subnet 1
      PublicSubnetCidrBlock2:
        default: Public Subnet 2
      PublicSubnetCidrBlock3:
        default: Public Subnet 3
      PrivateSubnetCidrBlock1:
        default: Private Subnet 1
      PrivateSubnetCidrBlock2:
        default: Private Subnet 2
      PrivateSubnetCidrBlock3:
        default: Private Subnet 3
      AvailabilityZone1:
        default: Availability Zone 1
      AvailabilityZone2:
        default: Availability Zone 2
      AvailabilityZone3:
        default: Availability Zone 3
      AllowAllInboundPublicRuleNumber:
        default: Public Inbound
      AllowAllOutboundPublicRuleNumber:
        default: Public Outbound
      AllowAllInboundPrivateRuleNumber:
        default: Private Inbound
      AllowAllOutboundPrivateRuleNumber:
        default: Private Outbound
      Jumpbox:
        default: Deploy jumpbox
      JumpboxAmi:
        default: Jumpbox AMI
      JumpboxKeyPair:
        default: Jumpbox SSH KeyPair
      JumpboxType:
        default: Jumpbox Instance IP (public/private)
      JumpboxInstanceType:
        default: Jumpbox Instance Size
      Size:
        default: Active Directory Size
      EnableSso:
        default: Active Directory SSO
      Name:
        default: Active Directory Name
      ShortName:
        default: Active Directory NetBIOS Name
      Password:
        default: Active Directory Admin Password
      NewVpc:
        default: Active Directory - Launch in new or existing VPC
      VpcId:
        default: Active Directory - If Existing, which VPC
      SubnetIds:
        default: Active Directory - If existing, which Subnets
      CookbookUrl:
        default: Cookbook URL
      Version:
        default: OpenVPN Version
      InstanceType:
        default: OpenVPN Instance Size
      InstanceRootVolumeSize:
        default: OpenVPN Root Volume Size
      VpcId:
        default: OpenVPN VPC
      SslLoadBalancer:
        default: SSL Certificate for Load Balancer
      AdminPassword:
        default: OpenVPN initial admin password
      OpenVPNDnsRecord:
        default: OpenVPN DNS hostname
      OpenVPNDnsZone:
        default: OpenVPN DNS Zone
      EnableMfa:
        default: Enable multi-factor authentication
      LdapBindDn:
        default: LDAP username for OpenVPN used for querying
      LdapBindPassword:
        default: LDAP password for OpenVPN used for querying
      LdapUsersBaseDn:
        default: LDAP base user DN
      LdapGroupVPNRequirement:
        default: LDAP group requirement
      LdapAdminUsername:
        default: LDAP admin username
      ClientNetmask:
        default: Client network mask
      ClientNetwork:
        default: Client network ip
      PrivateNetworkAccess1:
        default: Client network AWS access ip cidr 1
      PrivateNetworkAccess2:
        default: Client network AWS access ip cidr 2
      PrivateNetworkAccess3:
        default: Client network AWS access ip cidr 3
      RouteInternetTraffic:
        default: Client network traffic routed through OpenVPN
      WebPort:
        default: Port to use for HTTPS web interface
      ClientsTalkEachOther:
        default: Should the clients talk to each other?