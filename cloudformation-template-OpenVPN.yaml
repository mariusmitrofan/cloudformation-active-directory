Description: Launch OpenVPN stack in existing VPC

Parameters:

  #OpenVPN
  CookbookUrl:
    Type: String
    Default: 'https://github.com/netbears/opsworks-openvpn/releases/download/v1.0.0/cookbooks-v1.0.0.tar.gz'

  Version:
    Type: String
    Default: '2.7.4'

  OpsWorksStackName:
    Type: String
    Default: OpenVPN

  InstanceType:
    Type: String
    Default: 'c5.large'
    AllowedValues:
    - c5.large
    - c5.xlarge
    - c5.2xlarge
    - c5.4xlarge

  InstanceRootVolumeSize:
    Type: String
    Default: '50'
    Description: Size in GB of the root volume

  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC in which AD is deployed

  SubnetIdHost:
    Type: AWS::EC2::Subnet::Id
    Description: SubnetID (PRIVATE) in which AD is deployed

  SubnetIdLoadBalancer:
    Type: List<AWS::EC2::Subnet::Id>
    Description: List of SubnetIDs (PUBLIC) in which AD is deployed. Mention at least 2.

  SslLoadBalancer:
    Type: String
    Description: SSL ARN from Certificate Manager
    Default: arn:aws:acm:us-east-1:359360911388:certificate/0fbec0ab-69ea-46ab-bb0f-aecd359b4621

  DnsRecord:
    Type: String
    Default: vpn.aws.netbears.com

  DnsZone:
    Type: AWS::Route53::HostedZone::Id
    Description: Route53 hosted zone in which to place dns record

  #LDAP
  LdapBindDn:
    Type: String
    Default: openvpn@netbears.com

  LdapBindPassword:
    Type: String
    NoEcho: 'true'
    Default: 'pgZzB5Wu8N3mqyg3'

  LdapIp1:
    Type: String

  LdapIp2:
    Type: String

  LdapUsersBaseDn:
    Type: String
    Default: OU=Users,OU=NETBEARS,DC=netbears,DC=com

  LdapGroupVPNRequirement:
    Type: String
    Default: memberOf=CN=VPN,OU=Groups,OU=NETBEARS,DC=netbears,DC=com

  LdapAdminUsername:
    Type: String
    Default: mariusmitrofan

  #Network
  ClientNetmask:
    Type: String
    Default: '20'

  ClientNetwork:
    Type: String
    Default: '172.20.112.0'

  PrivateNetworkAccess1:
    Type: String
    Description: Set the VPC CIDR that you want to provide access to. Leave empty if none
    Default: "172.20.0.0/16"

  PrivateNetworkAccess2:
    Type: String
    Description: Set the VPC CIDR that you want to provide access to. Leave empty if none
    Default: "172.17.0.0/16"

  PrivateNetworkAccess3:
    Type: String
    Description: Set the VPC CIDR that you want to provide access to. Leave empty if none
    Default: "172.23.0.0/16"

  WebPort:
    Type: String
    Default: '443'

  ClientsTalkEachOther:
    Type: String
    Default: 'false'
    AllowedValues:
      - 'true'
      - 'false'

  RouteInternetTraffic:
    Type: String
    Default: 'false'
    AllowedValues:
      - 'true'
      - 'false'
    Description: Whether to route Internet traffic through OpenVPN or not

  DaemonListenPort:
    Type: String
    Default: '80'

  DaemonListenProtocol:
    Type: String
    Default: 'tcp'
    AllowedValues:
      - 'tcp'
      - 'udp'

Conditions:
  IsTcpDaemon:
    Fn::Equals:
      - Ref: DaemonListenProtocol
      - tcp

Resources:

  ServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - 'opsworks.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName:
            Fn::Sub: ${AWS::StackName}-OpsWorksDefaultPolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'ec2:*'
                  - 'iam:PassRole'
                  - 'cloudwatch:GetMetricStatistics'
                  - 'cloudwatch:DescribeAlarms'
                  - 'elasticloadbalancing:*'
                  - 'ecs:*'
                  - 'rds:*'
                Resource: '*'

  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: 
                - 'ec2.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName:
            Fn::Sub: ${AWS::StackName}-ec2
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'ec2:Get*'
                  - 'ec2:List*'
                  - 'ec2:Describe*'
                Resource:
                  - '*'
        - PolicyName:
            Fn::Sub: ${AWS::StackName}-s3
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 's3:*'
                Resource:
                  - '*'
        - PolicyName:
            Fn::Sub: ${AWS::StackName}-CloudWatchLogs
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'cloudwatch:*'
                  - 'logs:*'
                Resource:
                  - '*'

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - Ref: InstanceRole

  Ec2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription:
        Fn::Sub: ${AWS::StackName}-Sg
      VpcId:
        Ref: VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
        - IpProtocol: udp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0

  AlbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription:
        Fn::Sub: ${AWS::StackName}-Sg
      VpcId:
        Ref: VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort:
            Ref: WebPort
          ToPort:
            Ref: WebPort
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort:
            Ref: DaemonListenPort
          ToPort:
            Ref: DaemonListenPort
          CidrIp: 0.0.0.0/0
        - IpProtocol: udp
          FromPort:
            Ref: DaemonListenPort
          ToPort:
            Ref: DaemonListenPort
          CidrIp: 0.0.0.0/0

  OpsWorksStack: 
    Type: AWS::OpsWorks::Stack
    Properties: 
      AgentVersion: LATEST
      Name: 
        Ref: OpsWorksStackName
      ServiceRoleArn: 
        Fn::GetAtt:
          - ServiceRole
          - Arn
      DefaultInstanceProfileArn: 
        Fn::GetAtt:
          - InstanceProfile
          - Arn
      ConfigurationManager:
        Name: Chef
        Version: '12'
      UseCustomCookbooks: true
      CustomCookbooksSource:
        Type: archive
        Url:
          Ref: CookbookUrl
      DefaultSubnetId:
        Ref: SubnetIdHost
      VpcId:
        Ref: VpcId
      UseOpsworksSecurityGroups: true
      DefaultOs: Ubuntu 18.04 LTS
      DefaultRootDeviceType: ebs
      CustomJson:
        Fn::Sub: |
          {
            "openvpnas": {
              "version": "${Version}",
              "ubuntu_version": "Ubuntu18",
              "admin_username": "${LdapAdminUsername}"
              "admin_ui.https.port": "${WebPort}",
              "auth.ldap.0.add_req": "${LdapGroupVPNRequirement}",
              "auth.ldap.0.bind_dn": "${LdapBindDn}",
              "auth.ldap.0.bind_pw": "${LdapBindPassword}",
              "auth.ldap.0.server.0.host": "${LdapIp1}",
              "auth.ldap.0.server.1.host": "${LdapIp2}",
              "auth.ldap.0.users_base_dn": "${LdapUsersBaseDn}",
              "cs.https.port": "${WebPort}",
              "host.name": "${DnsRecord}",
              "vpn.client.routing.inter_client": "${ClientsTalkEachOther}",
              "vpn.client.routing.reroute_gw": "${RouteInternetTraffic}",
              "vpn.daemon.0.client.netmask_bits": "${ClientNetmask}",
              "vpn.daemon.0.client.network": "${ClientNetwork}",
              "vpn.daemon.0.listen.port": "${DaemonListenPort}",
              "vpn.daemon.0.listen.protocol": "${DaemonListenProtocol}",
              "vpn.server.routing.private_network.0": "${PrivateNetworkAccess1}",
              "vpn.server.routing.private_network.1": "${PrivateNetworkAccess2}",
              "vpn.server.routing.private_network.2": "${PrivateNetworkAccess3}"
            }
          }
      Tags:
        - Key: Application
          Value: OpenVPN
        - Key: MaintainerName
          Value: Marius Mitrofan
        - Key: MaintainerTeam
          Value: NETBEARS
        - Key: MaintainerEmail
          Value: support@netbears.com

  Elb:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    DependsOn: Layer
    Properties:
      HealthCheck:
        Interval: 30
        Target: TCP:22
        Timeout: 5
        UnhealthyThreshold: 5
        HealthyThreshold: 5
      Listeners:
        - Fn::If:
          - IsTcpDaemon
          - InstancePort:
              Ref: DaemonListenPort
            LoadBalancerPort:
              Ref: DaemonListenPort
            Protocol: SSL
            SSLCertificateId:
              Ref: SslLoadBalancer
          - Ref: AWS::NoValue
        - InstancePort:
            Ref: WebPort
          LoadBalancerPort:
            Ref: WebPort
          Protocol: HTTPS
          PolicyNames:
            - Fn::Sub: ${AWS::StackName}
          SSLCertificateId:
            Ref: SslLoadBalancer
      Scheme: internet-facing
      SecurityGroups:
        - Ref: AlbSecurityGroup
      Subnets:
        Ref: SubnetIdLoadBalancer
      ConnectionDrainingPolicy:
        Enabled: 'true'
        Timeout: '300'
      LBCookieStickinessPolicy:
        - CookieExpirationPeriod: 600
          PolicyName:
            Ref: AWS::StackName

  Layer:
    Type: AWS::OpsWorks::Layer
    Properties:
      Name: OpenVPN
      Shortname: openvpn-
      Type: custom
      EnableAutoHealing: 'false'
      AutoAssignElasticIps: 'false'
      AutoAssignPublicIps: 'false'
      StackId:
        Ref: OpsWorksStack
      CustomRecipes:
        Setup:
          - 'openvpn_stack::setup'
      UseEbsOptimizedInstances: True
      CustomSecurityGroupIds:
        - Fn::GetAtt: Ec2SecurityGroup.GroupId

  ElbLayer:
    DependsOn: Elb
    Type: AWS::OpsWorks::ElasticLoadBalancerAttachment
    Properties: 
      ElasticLoadBalancerName: 
        Ref: Elb
      LayerId: 
        Ref: Layer

  InstanceOpsWorks: 
    Type: AWS::OpsWorks::Instance
    DependsOn: Elb
    Properties: 
      StackId: 
        Ref: OpsWorksStack
      LayerIds: 
        - Ref: Layer
      InstanceType:
        Ref: InstanceType
      RootDeviceType: ebs
      SubnetId:
        Ref: SubnetIdHost
      Hostname: openvpn-1
      BlockDeviceMappings:
        - DeviceName: ROOT_DEVICE
          Ebs:
            VolumeType: gp2
            VolumeSize:
              Ref: InstanceRootVolumeSize

  Route53Record:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneId:
        Ref: DnsZone
      Comment: 
        Fn::Sub: Route53-record-for-OpenVPN
      RecordSets:
      - Name:
          Ref: DnsRecord
        Type: A
        AliasTarget:
          HostedZoneId: 
            Fn::GetAtt:
              - Elb
              - CanonicalHostedZoneNameID
          DNSName: 
            Fn::GetAtt:
              - Elb
              - DNSName


Outputs:
  AdminUrl:
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-AdminUrl"
    Value:
      Fn::Sub: "https://${DnsRecord}:${WebPort}/admin"

  ClientUrl:
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-ClientUrl"
    Value:
      Fn::Sub: "https://${DnsRecord}:${WebPort}"


Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: OpenVPN
      Parameters:
      - Size
      - CookbookUrl
      - Version
      - OpsWorksStackName
      - InstanceType
      - InstanceRootVolumeSize
      - VpcId
      - SubnetIdHost
      - SubnetIdLoadBalancer
      - SslLoadBalancer
      - AdminPassword
      - DnsRecord
      - DnsZone
    - Label:
        default: LDAP
      Parameters:
      - LdapBindDn
      - LdapBindPassword
      - LdapIp1
      - LdapIp2
      - LdapUsersBaseDn
      - LdapGroupVPNRequirement
      - LdapAdminUsername
    - Label:
        default: Network
      Parameters:
      - ClientNetmask
      - ClientNetwork
      - PrivateNetworkAccess
      - RouteInternetTraffic
      - ClientsTalkEachOther
      - DaemonListenProtocol
      - DaemonListenPort
      - PrivateNetworkAccess1
      - PrivateNetworkAccess2
      - PrivateNetworkAccess3
      - WebPort
    ParameterLabels:
      CookbookUrl:
        default: Cookbook URL
      Version:
        default: OpenVPN Version
      OpsWorksStackName:
        default: OpenVPN OpsWorks stack name
      InstanceType:
        default: OpenVPN Instance Size
      InstanceRootVolumeSize:
        default: OpenVPN Root Volume Size
      VpcId:
        default: OpenVPN VPC
      SubnetIdHost:
        default: OpenVPN Subnet ID for host
      SubnetIdLoadBalancer:
        default: OpenVPN Subnet IDs for load balancer
      SslLoadBalancer:
        default: SSL Certificate for Load Balancer
      AdminPassword:
        default: OpenVPN initial admin password
      DnsRecord:
        default: OpenVPN DNS hostname
      DnsZone:
        default: OpenVPN DNS Zone
      LdapBindDn:
        default: LDAP username for OpenVPN used for querying
      LdapBindPassword:
        default: LDAP password for OpenVPN used for querying
      LdapIp1:
        default: LDAP IP 1
      LdapIp2:
        default: LDAP IP 2
      LdapUsersBaseDn:
        default: LDAP base user DN
      LdapGroupVPNRequirement:
        default: LDAP group requirement
      LdapAdminUsername:
        default: LDAP admin username
      ClientNetmask:
        default: Client network mask
      ClientNetwork:
        default: Client network ip
      PrivateNetworkAccess1:
        default: Client network AWS access ip cidr 1
      PrivateNetworkAccess2:
        default: Client network AWS access ip cidr 2
      PrivateNetworkAccess3:
        default: Client network AWS access ip cidr 3
      RouteInternetTraffic:
        default: Client network traffic routed through OpenVPN
      WebPort:
        default: Port to use for HTTPS web interface
      ClientsTalkEachOther:
        default: Should the clients talk to each other?
