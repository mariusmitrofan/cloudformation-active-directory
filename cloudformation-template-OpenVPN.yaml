Description: Launch OpenVPN stack in existing VPC

Parameters:

  #OpenVPN
  CookbookUrl:
    Type: String
    Default: 'https://github.com/netbears/opsworks-openvpn/releases/download/v1.0.0/cookbooks-v1.0.0.tar.gz'

  Version:
    Type: String
    Default: '2.7.4'

  OpsWorksStackName:
    Type: String
    Default: OpenVPN

  InstanceType:
    Type: String
    Default: 'c5.large'
    AllowedValues:
    - c5.large
    - c5.xlarge
    - c5.2xlarge
    - c5.4xlarge

  InstanceRootVolumeSize:
    Type: String
    Default: '50'
    Description: Size in GB of the root volume

  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC in which AD is deployed

  SubnetIdHost:
    Type: AWS::EC2::Subnet::Id
    Description: SubnetID (PRIVATE) in which AD is deployed

  SubnetIdLoadBalancer:
    Type: List<AWS::EC2::Subnet::Id>
    Description: List of SubnetIDs (PUBLIC) in which AD is deployed. Mention at least 2.

  SslLoadBalancer:
    Type: String
    Description: SSL ARN from Certificate Manager
    Default: arn:aws:acm:us-east-1:359360911388:certificate/0fbec0ab-69ea-46ab-bb0f-aecd359b4621

  AdminPassword:
    Type: String
    NoEcho: 'true'
    Default: '2yfJ3C3b59L7GCke'

  DnsRecord:
    Type: String
    Default: vpn.aws.netbears.com

  DnsZone:
    Type: AWS::Route53::HostedZone::Id
    Description: Route53 hosted zone in which to place dns record

  #LDAP
  LdapAdminUserDn:
    Type: String
    Default: openvpn@netbears.com

  LdapAdminUserPassword:
    Type: String
    NoEcho: 'true'
    Default: 'pgZzB5Wu8N3mqyg3'

  LdapHostname:
    Type: String
    Default: ldap.aws.netbears.com:389

  LdapUsersBaseDn:
    Type: String
    Default: OU=NETBEARS,OU=Users,DC=netbears,DC=com

  LdapGroupVPNRequirement:
    Type: String
    Default: memberOf=CN=VPN,OU=NETBEARS,OU=Groups,DC=netbears,DC=com

  #Network
  ClientNetmask:
    Type: String
    Default: '20'

  ClientNetwork:
    Type: String
    Default: '172.20.112.0'

  PrivateNetworkAccess:
    Type: String
    Description: Set the VPC CIDR that you want to provide access to
    Default: "172.20.0.0/16"

Resources:

  ServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - 'opsworks.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName:
            Fn::Sub: ${AWS::StackName}-OpsWorksDefaultPolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'ec2:*'
                  - 'iam:PassRole'
                  - 'cloudwatch:GetMetricStatistics'
                  - 'cloudwatch:DescribeAlarms'
                  - 'elasticloadbalancing:*'
                  - 'ecs:*'
                  - 'rds:*'
                Resource: '*'

  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: 
                - 'ec2.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName:
            Fn::Sub: ${AWS::StackName}-ec2
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'ec2:Get*'
                  - 'ec2:List*'
                  - 'ec2:Describe*'
                Resource:
                  - '*'
        - PolicyName:
            Fn::Sub: ${AWS::StackName}-s3
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 's3:*'
                Resource:
                  - '*'
        - PolicyName:
            Fn::Sub: ${AWS::StackName}-CloudWatchLogs
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'cloudwatch:*'
                  - 'logs:*'
                Resource:
                  - '*'

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - Ref: InstanceRole

  Ec2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription:
        Fn::Sub: ${AWS::StackName}-Sg
      VpcId:
        Ref: VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
        - IpProtocol: udp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0

  AlbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription:
        Fn::Sub: ${AWS::StackName}-Sg
      VpcId:
        Ref: VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 943
          ToPort: 943
          CidrIp: 0.0.0.0/0
        - IpProtocol: udp
          FromPort: 1194
          ToPort: 1194
          CidrIp: 0.0.0.0/0

  OpsWorksStack: 
    Type: AWS::OpsWorks::Stack
    Properties: 
      AgentVersion: LATEST
      Name: 
        Ref: OpsWorksStackName
      ServiceRoleArn: 
        Fn::GetAtt:
          - ServiceRole
          - Arn
      DefaultInstanceProfileArn: 
        Fn::GetAtt:
          - InstanceProfile
          - Arn
      ConfigurationManager:
        Name: Chef
        Version: '12'
      UseCustomCookbooks: true
      CustomCookbooksSource:
        Type: archive
        Url:
          Ref: CookbookUrl
      DefaultSubnetId:
        Ref: SubnetIdHost
      VpcId:
        Ref: VpcId
      UseOpsworksSecurityGroups: true
      DefaultOs: Ubuntu 18.04 LTS
      DefaultRootDeviceType: ebs
      CustomJson:
        Fn::Sub: |
          {
            "openvpnas": {
                "version": "${Version}",
                "ubuntu_version": "Ubuntu18",
                "pass": "${AdminPassword}",
                "https": {
                    "ip_address": "ens5",
                    "port": "443"
                },
                "ldap": {
                    "bind_dn": "${LdapAdminUserDn}",
                    "bind_pw": "${LdapAdminUserPassword}",
                    "host": "${LdapHostname}",
                    "ssl_verify": "never",
                    "uname_attr": "sAMAccountName",
                    "use_ssl": "never",
                    "users_base_dn": "${LdapUsersBaseDn}",
                    "add_req": "${LdapGroupVPNRequirement}"
                },
                "host": {
                    "name": "${DnsRecord}"
                },
                "daemon": {
                    "client": {
                        "netmask_bits": "${ClientNetmask}",
                        "network": "${ClientNetwork}"
                    }
                },
                "server": {
                    "daemon": {
                        "tcp": {
                            "port": "80"
                        },
                        "udp": {
                            "port": "1194"
                        }
                    },
                    "routing": {
                        "gateway_access": "true",
                        "private_access": "nat",
                        "private_network": {
                            "0": "${PrivateNetworkAccess}"
                        },
                        "routed_subnets": {}
                    },
                    "tls_auth": "true",
                    "tls_version_min": "1.2",
                    "do_reauth": "true",
                    "internal": "360"
                }
            }
          }
      Tags:
        - Key: Application
          Value: OpenVPN
        - Key: MaintainerName
          Value: Marius Mitrofan
        - Key: MaintainerTeam
          Value: NETBEARS
        - Key: MaintainerEmail
          Value: support@netbears.com

  Elb:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    DependsOn: Layer
    Properties:
      HealthCheck:
        Interval: 30
        Target: TCP:443
        Timeout: 5
        UnhealthyThreshold: 5
        HealthyThreshold: 5
      Listeners:
        - InstancePort: 80
          LoadBalancerPort: 80
          Protocol: TCP
        - InstancePort: 443
          LoadBalancerPort: 443
          Protocol: HTTPS
          PolicyNames:
            - Fn::Sub: ${AWS::StackName}
          SSLCertificateId:
            Ref: SslLoadBalancer
        - InstancePort: 943
          LoadBalancerPort: 943
          Protocol: SSL
          SSLCertificateId:
            Ref: SslLoadBalancer
      Scheme: internet-facing
      SecurityGroups:
        - Ref: AlbSecurityGroup
      Subnets:
        Ref: SubnetIdLoadBalancer
      ConnectionDrainingPolicy:
        Enabled: 'true'
        Timeout: '300'
      LBCookieStickinessPolicy:
        - CookieExpirationPeriod: 600
          PolicyName:
            Ref: AWS::StackName

  Layer:
    Type: AWS::OpsWorks::Layer
    Properties:
      Name: ElasticSearch
      Shortname: openvpn-
      Type: custom
      EnableAutoHealing: 'false'
      AutoAssignElasticIps: 'false'
      AutoAssignPublicIps: 'false'
      StackId:
        Ref: OpsWorksStack
      CustomRecipes:
        Setup:
          - 'openvpn::setup'
      UseEbsOptimizedInstances: True
      CustomSecurityGroupIds:
        - Fn::GetAtt: Ec2SecurityGroup.GroupId

  ElbLayer:
    DependsOn: Elb
    Type: AWS::OpsWorks::ElasticLoadBalancerAttachment
    Properties: 
      ElasticLoadBalancerName: 
        Ref: Elb
      LayerId: 
        Ref: Layer

  # InstanceId1: 
  #   Type: AWS::OpsWorks::Instance
  #   DependsOn: Elb
  #   Properties: 
  #     StackId: 
  #       Ref: OpsWorksStack
  #     LayerIds: 
  #       - Ref: Layer
  #     InstanceType:
  #       Ref: InstanceType
  #     RootDeviceType: ebs
  #     SubnetId:
  #       Ref: SubnetIdHost
  #     Hostname: openvpn-1
  #     BlockDeviceMappings:
  #       - DeviceName: ROOT_DEVICE
  #         Ebs:
  #           VolumeType: gp2
  #           VolumeSize:
  #             Ref: InstanceRootVolumeSize


# Outputs:
#   JumpboxIp:
#     Condition: DeployJumpbox
#     Export:
#       Name:
#         Fn::Sub: "${AWS::StackName}-JumpboxIp"
#     Value:
#       Fn::If:
#         - PublicJumpbox
#         - Fn::GetAtt: JumpboxEc2.PublicIp
#         - Fn::GetAtt: JumpboxEc2.PrivateIp


Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: OpenVPN
      Parameters:
      - Size
      - CookbookUrl
      - Version
      - OpsWorksStackName
      - InstanceType
      - InstanceRootVolumeSize
      - VpcId
      - SubnetIdHost
      - SubnetIdLoadBalancer
      - SslLoadBalancer
      - AdminPassword
      - DnsRecord
      - DnsZone
    - Label:
        default: LDAP
      Parameters:
      - LdapAdminUserDn
      - LdapAdminUserPassword
      - LdapHostname
      - LdapUsersBaseDn
      - LdapGroupVPNRequirement
    - Label:
        default: Network
      Parameters:
      - ClientNetmask
      - ClientNetwork
      - PrivateNetworkAccess
    ParameterLabels:
      CookbookUrl:
        default: Cookbook URL
      Version:
        default: OpenVPN Version
      OpsWorksStackName:
        default: OpenVPN OpsWorks stack name
      InstanceType:
        default: OpenVPN Instance Size
      InstanceRootVolumeSize:
        default: OpenVPN Root Volume Size
      VpcId:
        default: OpenVPN VPC
      SubnetIdHost:
        default: OpenVPN Subnet ID for host
      SubnetIdLoadBalancer:
        default: OpenVPN Subnet IDs for load balancer
      SslLoadBalancer:
        default: SSL Certificate for Load Balancer
      AdminPassword:
        default: OpenVPN initial admin password
      DnsRecord:
        default: OpenVPN DNS hostname
      DnsZone:
        default: OpenVPN DNS Zone
      LdapAdminUserDn:
        default: LDAP username for OpenVPN
      LdapAdminUserPassword:
        default: LDAP password for OpenVPN
      LdapHostname:
        default: LDAP hostname
      LdapUsersBaseDn:
        default: LDAP base user DN
      LdapGroupVPNRequirement:
        default: LDAP group requirement
      ClientNetmask:
        default: Client network mask
      ClientNetwork:
        default: Client network ip
      PrivateNetworkAccess:
        default: Client network AWS access ip cidr
